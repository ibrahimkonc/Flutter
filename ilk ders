// ignore_for_file: camel_case_types

import 'package:dart_deneme/dart_deneme.dart' as dart_deneme;

enum fuelType { petrol, diesel, hybrid, ev }

enum gearboxType { auto, manual, semiAuto }

enum driveTrain { fourWheel, frontWheel, rearWheel }

// Map pricePoint = {
//   "b": "\$30k-\$40k",
//   "c": "\$40k-\$50k",
//   "d": "\$50k-\$65k",
//   "e": "\$65k-\$85k",
//   "s": "\$85k+",
// };

void main(List<String> arguments) {
  /*String text = "Hello world";
  print(text);
  int number = 5;
  print(number);
  bool result = false;
  print(result);
  double price = 1.5;
  print(price);
  dynamic data;
  print(data);

  dart_deneme.Test test = dart_deneme.Test("deneme");
  print(test.text);
  //print('Hello world: ${dart_deneme.calculate()}!');
  
  dart_deneme.Personel personel =
      dart_deneme.Personel("firstName", "lastName", "5757575757575");
  print(personel.firstName);
  print(personel.lastName);
  print(personel.fullName);
  print(personel.phoneNumber);
  -------------------------------------------
  */

/*
  dart_deneme.Araba araba = dart_deneme.Araba(
    "Mercedes",
    "Sedan",
    true,
    "dört",
    null,
    110,
  );
  print("TopSpeed: ${araba.hoursePower}");
  print(araba.model);
  print(araba.brand);
  print(araba.bodyType);
  print(araba.sunRoof ? "var" : "yok");
  print(araba.hoursePower == null ? "yok" : araba.hoursePower! * 2);

  ----------------------------------------
  */

/*
----------------------------------------
  List<int> notlar = [65, 75, 55, 5, 15, 60, 95, 80];
  notlar.add(85);
  notlar.addAll([90, 3]);
  int toplam = 0;
  int toplam2 = 0;
  int toplam3 = 0;
  int toplam4 = 0;
  for (var i = 0; i < notlar.length; i++) {
    toplam += notlar[i];
  }
  print(toplam / notlar.length);

  for (var element in notlar) {
    toplam2 += element;
  }
  print(toplam2 / notlar.length);

  notlar.forEach((sayi) {
    toplam3 += sayi;
  });
  print(toplam3 / notlar.length);

  toplam4 = notlar.fold(0, (prev, data) {
    return prev + data;
  });
  double ortalama = toplam4 / notlar.length;
  print("oratalama =>  ${ortalama}");

  List<int> gecen_notlar = notlar.where((not) => not >= ortalama).toList();
  int gecen_kisis_sayisi = gecen_notlar.length;
  print("Geçen Kişi sayısı: ${gecen_kisis_sayisi} ");
  print("Kalan Kişi sayısı: ${notlar.length - gecen_kisis_sayisi} ");
  print("Geçen Notlar : ${gecen_notlar} ");
 ----------------------------------------
 
  Map<int, String> map = {1: "Ocak", 2: "Şubat"};

  print(map[2]);
  String zaman = "sabah";

  switch (zaman) {
    case "sabah":
      print("Günaydın.");
      break;
    case "oglen":
      print("Tünaydın.");
      break;
    case "aksam":
      print("iyi akşamlar.");
      break;
    default:
  }
    */

  print(dart_deneme.getCountryPhoneCount("+15"));

  var cars = [
    {
      "brand": "Porsche 911",
      "fuel-type": fuelType.petrol,
      "drive-train": driveTrain.rearWheel,
      "seat-count": 2,
      "gearbox": gearboxType.semiAuto,
      "color": "Black",
      //"priceGap": pricePoint[1],
      "consumption": 9,
      "0-100": 2.9
    },
    {
      "brand": "BMW M4 Comp",
      "fuel-type": fuelType.petrol,
      "seat-count": 4,
      "drive-train": driveTrain.rearWheel,
      "gearbox": gearboxType.semiAuto,
      "color": "Black",
      //"priceGap": pricePoint[1],
      "consumption": 8.4,
      "0-100": 3.9
    },
    {
      "brand": "Audi RS5",
      "fuel-type": fuelType.petrol,
      "seat-count": 4,
      "drive-train": driveTrain.fourWheel,
      "gearbox": gearboxType.auto,
      "color": "White",
      //"priceGap": pricePoint[1],
      "consumption": 8,
      "0-100": 3.5
    },
  ];

  //TODO define scope
  //STRING brand and model
  //ENUM fuelt type => petrol, diesel, hybrid, ev
  //LISTdrive-train => 4 wheel, front wheels, rear wheels
  //INT seat count
  //ENUM gearbox => auto, semi-auto, manual
  //STRING color
  //MAP price gap => $30k-$40k, $40k-$50k, $60k-$80k, $80k+
  //MAP segment (b, c, d, e , s)
  //DOUBLE consumption in l/100km
  //INT max speed
  //DOUBLE 0-100km/s

  //DEFINITON OF DONE: FILTER INPUT VALUES, RETURN REST

  //functions practice:

  //----------------- 1. yöntem
  List filterCars(
      String? brand,
      String? color,
      fuelType? fuelType,
      int? seatCount,
      driveTrain? driveTrain,
      gearboxType? gearboxType,
      double? consumption,
      double? zeroToHundred) {
    var data = cars
        .where((elem) =>
            (elem["brand"].toString().toLowerCase() ==
                    brand.toString().toLowerCase() ||
                brand == null) &&
            (elem["color"].toString().toLowerCase() ==
                    color.toString().toLowerCase() ||
                color == null) &&
            (elem["fuel-type"] == fuelType || fuelType == null) &&
            (elem["seat-count"] == seatCount || seatCount == null) &&
            (elem["drive-train"] == driveTrain || driveTrain == null) &&
            (elem["gearbox"] == gearboxType || gearboxType == null) &&
            (elem["consumption"] == consumption || consumption == null) &&
            (elem["0-100"] == zeroToHundred || zeroToHundred == null))
        .toList();
    return data;
  }

//----------------- 2. yöntem
  List filterCars2(
      String? brand,
      String? color,
      fuelType? fuelType,
      int? seatCount,
      driveTrain? driveTrain,
      gearboxType? gearboxType,
      double? consumption,
      double? zeroToHundred) {
    var data = [];

    for (var elem in cars) {
      if ((elem["brand"].toString().toLowerCase() ==
                  brand.toString().toLowerCase() ||
              brand == null) &&
          (elem["color"].toString().toLowerCase() ==
                  color.toString().toLowerCase() ||
              color == null) &&
          (elem["fuel-type"] == fuelType || fuelType == null) &&
          (elem["seat-count"] == seatCount || seatCount == null) &&
          (elem["drive-train"] == driveTrain || driveTrain == null) &&
          (elem["gearbox"] == gearboxType || gearboxType == null) &&
          (elem["consumption"] == consumption || consumption == null) &&
          (elem["0-100"] == zeroToHundred || zeroToHundred == null)) {
        data.add(elem);
      }
    }

    return data;
  }

//----------------- Cevap
  var response = filterCars(
    null,
    "Black",
    null,
    4,
    null,
    null,
    null,
    null,
  );
  response.forEach((element) {
    print(element);
  });
}
